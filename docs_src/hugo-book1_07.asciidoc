= GRAMMAR AND PARSING

== Grammar Definition

Every valid player command must specified.
More precisely, each usage of a particular verb must be detailed in full by the source code.
Grammar definitions must _always_ come at the start of a program, preceding any objects or executable code.
That is, if several additional grammar files are to be included, or new grammar is to be explicitly defined in the source code, it must be done before any files containing executable code are included, or any routines, objects, etc. are defined.

The syntax used for grammar definition is:

// @HUGO SYNTAX MOCKUP!
[source,hugo]
----------------------------------------------
[x]verb "<verb1>" [, "<verb2>", "<verb3>",...]
* <syntax specification 1>      <VerbRoutine1>
* <syntax specification 2>      <VerbRoutine2>
...
----------------------------------------------

Now, what does that mean?
Here are some examples from the library grammar file *verblib.g*:

// @NOTE: Code pasted from actual library source:
[source,hugo]
---------------------------------------------------------------------------
verb "get", "step"
        *                                                       DoVague
        * "up"/"out"/"off"/"down"                               DoStand
        * "outof"/"offof"/"off" object                          DoExit
        * "in"/"inside"/"on"                                    DoEnter
        * "in"/"into"/"inside"/"on"/"onto" object               DoEnter

verb "take"
        *                                                       DoVague
        * "inventory"                                           DoInventory
        * "off" multiheld                                       DoTakeOff
        * multiheld "off"                                       DoTakeOff

xverb "save", "suspend"
        *                                                       DoSave
        * "game"/"story"                                        DoSave

verb "read", "peruse"
        *                                                       DoVague
        * readable                                              DoLook

verb "unlock"
        *                                                       DoVague
        * lockable "with"/"using" held                          DoUnlock
        * lockable                                              DoUnlock
---------------------------------------------------------------------------

Each `verb` or `xverb` header begins a new verb definition.
An `xverb` is a special signifier that indicates that the engine should not call the `Main` routine after successful completion of the action.
`xverb` is typically used with non-action, housekeeping-type verbs such as saving, restoring, quitting, and restarting.

Another thing that can be done is to specify:

// @HUGO SYNTAX MOCKUP!
[source,hugo]
--------------------------
verb some_object
    * object        DoVerb
--------------------------

which will have the effect of, instead of defining the verb with a dictionary word, checking at runtime `some_object.noun` as the verb word to be matched.
What this allows is for the `some_object.noun` property to be a routine that can return varying values at runtime in order to provide for dynamic grammar, if required.
However, since this sort of dynamic grammar isn't often required, static grammar definitions are far more common.

Next in the header comes one or more verb words.
Each of the specified words will share the following verb grammar _exactly_.
This is why `get` and `take` in the above examples are defined separately, instead of as

[source,hugo]
------------------
verb "get", "take"
------------------

In this way, the commands like

[example,role="gametranscript"]
>get up

and

[example,role="gametranscript"]
>take off hat

are allowable, while

[example,role="gametranscript"]
>take up

and

[example,role="gametranscript"]
>get off hat

won't make any sense.

Each line beginning with an asterisk (`*`) is a separate valid usage of the verb being defined.

[NOTE]
================================================================================
Every player input line must begin with a verb.
Exceptions, where a command is directed to an object as in

[example,role="gametranscript"]
>Ned, get the ball

will be dealt with later.
================================================================================

Up to two objects and any number of dictionary words may make up a syntax line.
The objects must be separated by at least one dictionary word.

Valid object specifications are:

[horizontal]
`object`        :: any visible object (the direct object)
`xobject`       :: the indirect object
`attribute`     :: any visible object that is `attribute`
`parent`        :: an xobject that is the parent of the object
`held`          :: any object possessed by the player object
`notheld`       :: an object explicitly not held
`anything`      :: any object, held or not, visible or not
`multi`         :: multiple visible objects
`multiheld`     :: multiple held objects
`multinotheld`  :: multiple notheld objects
`number`        :: a positive integer number
`word`          :: any dictionary word
`string`        :: a quoted string
`(RoutineName)` :: a routine name, in parentheses
`(objectname)`  :: a single object name, in parentheses

[TIP]
================================================================================
If a number is specified in the grammar syntax, it will be passed to the verbroutine in the `object` global.
If a string is specified, it will be passed in the engine's `parse$` variable, which can then be turned into a string array using the `string` function.
================================================================================

Dictionary words that may be used interchangeably are separated by a slash (`/`).

Two or more dictionary words in sequence must be specified separately.
That is, in the input line:

[example,role="gametranscript"]
>take hat out of suitcase

the syntax line

[source,hugo]
-----------------------------
* object "out" "of" container
-----------------------------

will be matched, while

[source,hugo]
---------------------------
* object "out of" container
---------------------------

would never be recognized, since the engine will automatically parse "`out`" and "`of`" as two separate words; the parser will never find a match for "`out of`".

Regarding object specification within the syntax line: once the direct object has been found, the remaining object in the input line will be stored as the xobject.
That is, in the example immediately above, a valid object in the input line with the attribute `container` will be treated as the indirect object by the verb routine.

[IMPORTANT]
================================================================================
An important point to remember when mixing dictionary words and objects within a syntax line is that, unless directed differently, the parser may confuse a word-object combination with an invalid object name.
================================================================================

Consider the following:

[source,hugo]
---------------------------------
verb "pick"
        * object            DoGet
        * "up" object       DoGet
---------------------------------

This definition will result in something like

[example,role="gametranscript"]
================================================================================
>pick up box

You haven't seen any "up box", nor are you likely to in the near future even if such a thing exists.
================================================================================

(assuming that "`up`" has been defined elsewhere as part of a different object name, as in *objlib.h*), because the processor processes the syntax

[source,hugo, subs="+attributes"]
---------------------------------
{wj}        * object
---------------------------------

and determines that an invalid object name is being used; it never gets to

[source,hugo, subs="+attributes"]
---------------------------------
{wj}        * "up" object
---------------------------------

The proper verb definition would be ordered like

[source,hugo]
---------------------------------
verb "pick"
        * "up" object       DoGet
        * object            DoGet
---------------------------------

so that both "`pick <object>`" and "`pick up <object>`" are valid player commands.
It's generally good practice to make sure that more specific grammar precedes more general grammar for this reason.

To define a new grammar condition that will take precedence over an existing one -- such as in *verblib.g* -- simply define the new condition first (i.e., before including *verblib.g*).

[TIP]
================================================================================
As a rule, unless you need to preempt the library's normal grammar processing, include any new grammar _after_ the library files.
(The reason for this is that the library grammar is carefully tuned to handle situations exactly like that described above.)
================================================================================

A single object may be specified as the only valid object for a particular syntax:

[source,hugo]
------------------------------------------
verb "rub"
        * (magic_lamp)      DoRubMagicLamp
------------------------------------------

will produce a "`You can't do that with...`" error for any object other than the `magic_lamp` object.

Using a routine name to specify an object is slightly more involved: the engine calls the given routine with the object specified in the input line as its argument; if the routine returns true, the object is valid -- if not, a parsing error is expected to have been printed by the routine.
If two routine names are used in a particular syntax, such as

[source,hugo, subs="+attributes"]
---------------------------------------------------
{wj}        * (FirstRoutine) "with" (SecondRoutine)
---------------------------------------------------

then `FirstRoutine` validates the object and `SecondRoutine` validates the xobject.


== The Parser

Immediately after an input line is received, the engine calls the parser, and the first step taken is to identify any invalid words, i.e., words that are not in the dictionary table.

[NOTE]
================================================================================
One non-dictionary word or phrase is allowed in an input line, providing it is enclosed in quotation marks.
If the command is successfully parsed and the quoted word or phrase is matched to a `string` grammar token, that string is passed to `parse$`.
More than one non-dictionary word or phrase (even if the additional phrases are enclosed in quotes) are not allowed.
================================================================================

The next step is to break the line down into individual words.
Words are separated by spaces and basic punctuation (including `!` and `?`) which are removed.
All characters in an input line are converted to lowercase (except those inside quotation marks).

The next step is to process the four types of special "`words`" which may be defined in the source code.

// @EDITED STYLES: (undocumented)
//      Added extra [.big.red] styles to the four special words, to make them
//      stand out more.

[.big.red]#_Removals_# are the simplest.
These are simply words that are to be automatically removed from any input line, and are generally limited to words such as "`a`" and "`the`" which would, generally speaking, only make grammar matching more complicated and difficult.
The syntax for defining a removal is:

// @HUGO SYNTAX MOCKUP!
[source,hugo]
---------------------------------------------
removal "<word1>"[, "<word2>", "word<3>",...]
---------------------------------------------

as in

[source,hugo]
------------------------
removal "a", "an", "the"
------------------------

[.big.red]#_Punctuation_# is similar to a removal, except it specifies the removal of individual characters instead of whole words:

// @HUGO SYNTAX MOCKUP!
[source,hugo]
--------------------------------------------------------------------------------
punctuation "<character1>[<character2>...]
--------------------------------------------------------------------------------

as in

[source,hugo]
--------------------------------------------------------------------------------
punctuation "$%"
--------------------------------------------------------------------------------

[.big.red]#_Synonyms_# are slightly more complex.
These are words that will never be found in the parsed input line; they are replaced by the specified word for which they are a synonym.

// @HUGO SYNTAX MOCKUP!
[source,hugo]
--------------------------------------------------------------------------------
synonym "<synonym>" for "<word>"
--------------------------------------------------------------------------------

as in

[source,hugo]
--------------------------------------------------------------------------------
synonym "myself" for "me"
--------------------------------------------------------------------------------

// @FIXME: The sentence "is possible to, particularly [..] and adjectives specify"
//         might need a comma (-> "adjectives, specify") to reduce ambiguity and
//         increase readability.

The above example will replace every occurrence of "`myself`" in the input line with "`me`".
Usage of synonyms will likely not be extensive, since of course it is possible to, particularly in the case of object nouns and adjectives specify synonymous words which are still treated as distinct.

[.big.red]#_Compounds_# are the final type of special word, specified as:

// @HUGO SYNTAX MOCKUP!
[source,hugo]
--------------------------------------------------------------------------------
compound "<word1>", "<word2>"
--------------------------------------------------------------------------------

as in

[source,hugo]
--------------------------------------------------------------------------------
compound "out", "of"
--------------------------------------------------------------------------------

so that the input line

[example,role="gametranscript"]
>get hat out of suitcase

would be parsed to

[example,role="gametranscript"]
>get hat outof suitcase

Depending on the design of grammar tables for certain syntaxes, the use of compounds may make grammar definition more straightforward, so that by using the above compound,

[source,hugo]
--------------------------------------------------------------------------------
verb "get"
        * multinotheld "outof"/"offof"/"from" parent
--------------------------------------------------------------------------------

is possible, and likely more desirable to

[source,hugo]
--------------------------------------------------------------------------------
verb "get"
        * multinotheld "out"/"off" "of" parent
        * multinotheld "from" parent
--------------------------------------------------------------------------------

When the parser has finished processing the input line, the result is a specially defined (by the Hugo Engine) array called `word[]`, where the number of valid elements is held in the global variable `words`.
Therefore, in

[example,role="gametranscript"]
>get the hat from the table

the parser -- using the removals defined in *hugolib.h* -- will produce the following results:

[source,hugo]
-----------------
word[1] = "get"
word[2] = "hat"
word[3] = "from"
word[4] = "table"

words = 4
-----------------

[NOTE]
================================================================================
Multiple-command input lines are also allowed, provided that the individual commands are separated by a period (`.`).
================================================================================

[example,role="gametranscript"]
>get hat. go n. go e.

would become

[source,hugo]
---------------
word[1] = "get"
word[2] = "hat"
word[3] = ""
word[4] = "go"
word[5] = "n"
word[6] = ""
word[7] = "go"
word[8] = "e"
word[9] = ""

words = 9
---------------

[TIP]
================================================================================
See *hugolib.h* for an example of how

[example,role="gametranscript"]
>get hat then go n

is translated into:

[source,hugo]
--------------------------------------------------------------------------------
word[1] = "get"
word[2] = "hat"
word[3] = ""
word[4] = "go"
word[5] = "n"
--------------------------------------------------------------------------------

in the `Parse` routine.
================================================================================

A maximum of thirty-two words is allowed.
The period is in each case converted to the empty dictionary entry (`+""+`; dictionary address = 0), which is a signal to the engine that processing of the current command should end here.

[NOTE]
================================================================================
The parsing and grammar routines also recognize several system words, each in the format `~word`.
These are:

[horizontal]
`~and`    :: referring to: multiple specific objects
`~all`    :: referring to: multiple objects in general
`~any`    :: referring to: any one of a list of objects
`~except` :: referring to: an excluded object
`~oops`   :: to correct an error in the previous input line

To allow an input line to access any of these system words, a synonym must be defined, such as:

[source,hugo]
synonym "and" for "~and"

The library defines several such synonyms.
================================================================================


== __What Should I Be Able To Do Now?__

It should by now be relatively straightforward how to go about adding a new verb (with appropriate grammar) -- or even modifying an existing one.
For instance, consider a game in which disco dancing plays an absolutely vital role, and where the command "`>GET DOWN`" must at all costs be implemented as a synonym for "`>DANCE`" or "`>BOOGIE`".

For starters, you'll need to add the initial grammar and verbroutine:

[source,hugo]
-----------------------------------
verb "dance", "boogie"
        *                   DoDance
-----------------------------------

and

[source,hugo]
-----------------------------------
routine DoDance
{
    "You get down, all night long."
}
-----------------------------------

Keep in mind that the verb definition, as with all grammar, must come before any other code, definitions, etc.
Now, you'll have to add the "`>GET DOWN`" grammar:

[source,hugo]
-----------------------------------
verb "get"
        * "down"            DoDance
-----------------------------------

Now, this must come both before any other code or definitions as well as the _existing_ grammar for "`>GET <object>`" (from *VERBLIB.G*).
Otherwise, the regular grammar for

[source,hugo, subs="+attributes"]
-------------------------------------
{wj}        * object            DoGet
-------------------------------------

will take precedence.
By superseding it, however, we ensure that any grammar matching the desired pattern will result in `DoDance` being called instead.


// EOF //
