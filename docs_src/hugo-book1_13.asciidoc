// *****************************************************************************
// *                                                                           *
// *      Hugo Book I: 13/19 -- App. A. Summary of Keywords and Commands       *
// *                                                                           *
// *****************************************************************************
//
[appendix]
[[appendix_a]]
= Summary of Keywords and Commands

[cols="1m,3d,20a",frame=none,grid=none,stripes=none]
|===============================================================================

// ****//   and   //****

3+<.^| [.big]#and#
.3+| {blank}

s| Description: a| Logical AND.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = <value1> and <value2>
............................
{blank}

s| Result: a|
`x` will be true if `<value1>` and `<value2>` are both non-zero, false if one or both is zero.

// ****//   anything   //****

3+<.^| [.big]#anything#
| {blank}

s| Description: a|
Object specifier in grammar syntax line, indicating that any nameable object in the object tree is valid.

// ****//   array   //****

3+<.^| [.big]#array#
.2+| {blank}

s| Description: a|
When used as a data type modifier, specifies that the following value is to be treated as an array address.

s| Example: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
<var1> = array <var2>[<n>]
............................

The variable `<var2>` will be treated as an array address.

// ****//   break   //****

3+<.^| [.big]#break#
.2+| {blank}

s| Description: a| Terminates the immediate enclosing loop.

s| Example: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
while <expression1>
{
    while <expression2>
    {
        if <expression3>
        break
        ...
    }
    ...
}
............................

The `break` statement, if encountered, will terminate the innermost loop.

// ****//   call   //****

3+<.^| [.big]#call#
.3+| {blank}

s| Description: a|
Calls a routine indirectly, i.e., when the routine address has been stored in a variable, object property, etc.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
..................................
call <value>[(<arg1>, <arg2>,...)]
..................................

or

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = call <value>(...)
............................

where `<value>` is a valid data type holding the routine address.

s| Value: a|
When used as a function, returns the value returned by the specified routine.

// ****//   capital   //****

3+<.^| [.big]#capital#
.2+| {blank}

s| Description: a|
Print statement modifier, indicating that the next word should be printed with the first letter capitalized.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
print capital <address>
............................

where `<address>` is any dictionary word, such as, for example, an `object.name` property.

// ****//   case   //****

3+<.^| [.big]#case#
.2+| {blank}


s| Description: a| Specifies a conditional case in a select structure.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
...............................
select <val>
    case <case1>[, <case2>,...]
        ...
    case <case3>[, <case4>,...]
        ...
...............................

where `<val>` is value such as a variable, routine return value, object property, array element, etc., and each `<case>` is a single value for comparison (not an expression).

// ****//   child   //****

3+<.^| [.big]#child#
.2+| {blank}

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = child(<parent>)
............................
{blank}

s| Return{nbsp}value: a|
The object number of the immediate child object of `<parent>`, or 0 if `<parent>` has no children.

// ****//   children   //****

3+<.^| [.big]#children#
.2+| {blank}

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = children(<parent>)
............................
{blank}

s| Return{nbsp}value: a| The number of child objects possessed by `<parent>`.

// ****//   cls   //****

3+<.^| [.big]#cls#
.2+| {blank}

s| Description: a|
Clears the current text window repositions the output coordinates at the bottom left of the text window.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
cls
............................
{blank}

// ****//   color   //****

3+<.^| [.big]#color (colour)#
.3+| {blank}

s| Description: a| Sets the display colors for text output.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
..................................
color <foreground>[, <background>]
..................................

where `<background>` is optional.

s| Parameters: a|

// @EDITED XREF: (Issue #27)
//    "(see page 64)" -> "(see Sec. 4.3)"
// @XREF: Table "Standard Colors Defined by the Hugo Library" in ยง4.3.
Standard color values for `<foreground>` and `<background>` with constants defined in *hugolib.h* (see <<hugo-book1_04#hugolib-colors,{section-refsig} 4.3>>) are:

[cols=">m,<s,<m",options=autowidth,grid=none,stripes=even]
!=====================================
!  0 ! Black         ! BLACK
!  1 ! Blue          ! BLUE
!  2 ! Green         ! GREEN
!  3 ! Cyan          ! CYAN
!  4 ! Red           ! RED
!  5 ! Magenta       ! MAGENTA
!  6 ! Brown         ! BROWN
!  7 ! White         ! WHITE
!  8 ! Dark gray     ! DARK_GRAY
!  9 ! Light blue    ! LIGHT_BLUE
! 10 ! Light green   ! LIGHT_GREEN
! 11 ! Light cyan    ! LIGHT_CYAN
! 12 ! Light red     ! LIGHT_RED
! 13 ! Light magenta ! LIGHT_MAGENTA
! 14 ! Light yellow  ! LIGHT_YELLOW
! 15 ! Bright white  ! BRIGHT_WHITE
!=====================================
{blank}

// ****//   dict   //****

3+<.^| [.big]#dict#
.2+| {blank}

s| Description: a| Dynamically creates a new dictionary entry at runtime.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = dict(<array>, <maxlen>)

x = dict(parse$, <maxlen>)
............................

where `<array>` or `parse$` holds the string to be written into the dictionary, and `<maxlen>` represents the maximum number of characters to be written. Returns the new dictionary address.

[IMPORTANT]
================================================================================
Space should be reserved for any dictionary entries to be created at runtime using the `$MAXDICTEXTEND` setting during compilation.
================================================================================

// ****//   do   //****

3+<.^| [.big]#do#
.2+| {blank}

s| Description: a| Marks the starting point of a do-while loop.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
do
{
    ...
}
while <expr>
............................

The loop will continue to run as long as `<expr>` holds true.

// ****//   elder   //****

3+<.^| [.big]#elder#
.2+| {blank}

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = elder(<object>)
............................
{blank}

s| Return{nbsp}value: a|
The object number of the object preceding `<object>` on the same branch in the object tree.
The reverse of `sibling`.


// ****//   eldest   //****

3+<.^| [.big]#eldest#

| {blank} 2+d| Same as `child`.

// ****//   else   //****

3+<.^| [.big]#else#
.2+| {blank}

s| Description: a|
In an `if`-`elseif`-`else` conditional block, indicates the default operation if no previous condition has been met.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
if <condition>
    ...
else
    ...
............................
{blank}

// ****//   elseif   //****

3+<.^| [.big]#elseif#
.2+| {blank}

s| Description: a|
In an `if`-`elseif`-`else` conditional block, indicates a condition that will be checked only if no preceding condition has been met.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
if <condition1>
    ...
elseif <condition2>
    ...
elseif <condition3>
    ...
............................
{blank}

// ****//   false   //****

3+<.^| [.big]#false#
| {blank}

s| Description: a| A predefined constant value: 0.

// ****//   for   //****

3+<.^| [.big]#for#
.2+| {blank}

s| Description: a| Loop construction.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
..............................
for (<initial>; <test>; <mod>)
{
    ...
}
..............................

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
for <var> in <object>
{
    ...
}
............................

For the first form, where `<initial>` is the initial assignment expression (e.g. `a = 1`), `<test>` is the test expression (e.g. `a < 10`), and `<mod>` is the modifying expression (e.g. `a = a + 1`).
The loop will execute as long as `<test>` holds true.

The second form loops through all the children of `<object>` (if any), setting `<var>` to each child object in sequence.

// ****//   held   //****

3+<.^| [.big]#held#
| {blank}

s| Description: a|
Object specifier in grammar syntax line, indicating that any single object possessed by the player object is valid.

// ****//   hex   //****

3+<.^| [.big]#hex#
.2+| {blank}

s| Description: a|
Print statement modifier signifying that the following value is not a dictionary address, but should be printed as a hexadecimal number.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
print hex <var>
............................

where, for example, `<var>` is equal to 26, will print "`1A`".

// ****//   if   //****

3+<.^| [.big]#if#
.2+| {blank}

s| Description: a| A conditional expression.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
if <condition>
    ...
............................

where `<condition>` is an expression or value, will run the following statement block only if `<condition>` is true.

// ****//   in   //****

3+<.^| [.big]#in#
.2+| {blank}

s| Description: a|
When used in an object definition, places the object in the object tree as a possession of the specified parent.
When used in an expression, returns true if the object is in the specified parent.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
in <parent>
............................

or, for example:

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
if <object> [not] in <parent>
{
    ...
}
............................
{blank}

// ****//   input   //****

3+<.^| [.big]#input#
.2+| {blank}

s| Description: a|
Receive input from keyboard, storing the dictionary addresses of the individual words in the word array.
Unrecognized words are given a value of 0.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
input
............................
{blank}

// ****//   is   //****

3+<.^| [.big]#is#
.4+| {blank}

s| Description: a| Attribute assignment/testing.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
.............................
<object> is [not] <attribute>
.............................
{blank}

s| Usage: a|
When used as an assignment on its own, will set (or clear, if `not` is used) the specified attribute for the given object.
May also be used in an expression.

s| Return{nbsp}value: a|
When used in an expression, returns true if `<object>` has the specified attribute set (or cleared, if `not` is used).
Otherwise, it returns false.

// ****//   jump   //****

3+<.^| [.big]#jump#
.2+| {blank}

s| Description: a| Jumps to a specified label.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
jump <label>
............................

where a unique `<label>` exists on a separate line somewhere in the program, in the form:

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
:<label>
............................
{blank}

// ****//   local   //****

3+<.^| [.big]#local#
.2+| {blank}

s| Description: a| Defines one or more variables local to the current routine.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
..................................
local <var1>[, <var2>, <var3>,...]
..................................
{blank}

// ****//   locate   //****

3+<.^| [.big]#locate#
.3+| {blank}

s| Description: a| Sets the cursor position within the current text window.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
locate(<row>, <column>)
............................
{blank}

s| Note: a|
The maximum horizontal/vertical cursor position is constrained by the boundaries of the current text window.
The cursor position is calculated in fixed-width character coordinates.

// ****//   move   //****

3+<.^| [.big]#move#
.2+| {blank}

s| Description: a| Moves an object with all its possessions to a new parent.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
.............................
move <object> to <new parent>
.............................
{blank}

// ****//   multi   //****

3+<.^| [.big]#multi#
| {blank}

s| Description: a|
Object specifier in grammar syntax line, indicating that multiple available objects are valid.

// ****//   multiheld   //****

3+<.^| [.big]#multiheld#
| {blank}

s| Description: a|
Object specifier in grammar syntax line, indicating that multiple objects possessed by the player object are valid.

// ****//   multinotheld   //****

3+<.^| [.big]#multinotheld#
| {blank}

s| Description: a|
Object specifier in grammar syntax line, indicating that multiple objects explicitly not held by the player object are valid.

// ****//   music   //****

3+<.^| [.big]#music#
.2+| {blank}

s| Description: a| Load and play a music resource (if audio output is available).

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
....................................
music [repeat] "file", "song"[, vol]
music 0
....................................

where `<file>` is a compiled Hugo resourcefile, and `<song>` is a music module in MOD, S3M, or XM format.
The optional `<vol>` argument, if given, ranges from 0 to 100 and gives a percentage of volume for playback.
If the `repeat` token is used, the song continues to loop until either a new song is played, or the current song is stopped (using `music 0`).

// ****//   nearby   //****

3+<.^| [.big]#nearby#
.2+| {blank}

s| Description: a|
Used in an object definition to place the object in the specified position in the object tree.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
nearby <object>
............................

Gives the current object the same parent as `<object>`.

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
nearby
............................

Gives the current object the same parent as the last-defined object.

// ****//   newline   //****

3+<.^| [.big]#newline#
.2+| {blank}

s| Description: a|
Print statement modifier, indicating that a line feed and carriage return should be issued if the current output position is not already at the start of a blank line.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
print newline
............................
{blank}

// ****//   not   //****

3+<.^| [.big]#not#
.3+| {blank}

s| Description: a| Logical not.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = not <value>
............................

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
<object> is not <attribute>
............................
{blank}

s| Result: a|
In the first example, x will be true if `<value>` is false, or false if `<value>` is true.

In the second, the specified attribute will be cleared for `<object>` when used alone as an assignment.
As part of an expression, it will return true only if `<object>` does not have `<attribute>` set.

// ****//   notheld   //****

3+<.^| [.big]#notheld#
| {blank}

s| Description: a|
Object specifier in grammar syntax line, indicating that a single object explicitly not held by the player object is valid.

// ****//   number   //****

3+<.^| [.big]#number#
.2+| {blank}

s| Description: a|
When used in a grammar syntax line, indicates that a single positive integer number is valid.

When used as a `print` statement modifier, indicates that the following value is not a dictionary address, but should be printed as a positive integer number.

s| Syntax: a|
(for usage as a `print` statement modifier)

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
print number <val>
............................

where, for example, `<val>` is equal to 100, will print "`100`" instead of the word beginning at the address 100 in the dictionary table.

// ****//   object   //****

3+<.^| [.big]#object#
| {blank}

s| Description: a|
Global variable holding the object number of the direct object, if any, specified in the input line.

When used in a grammar syntax line, indicates that a single available object is valid.

// ****//   or   //****

3+<.^| [.big]#or#
.3+| {blank}

s| Description: a| Logical OR.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = <value1> or <value2>
............................
{blank}

s| Result: a|
`x` will be true if either `<value1>` or `<value2>` is non-false, or false if both are false.

// ****//   parent   //****

3+<.^| [.big]#parent#
.5+| {blank}

2+d| (Usage 1)
s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = parent(<object>)
............................
{blank}

s| Return{nbsp}value: a|
The object number of `<object>`{wj}`'s parent object.

2+d| (Usage 2)
s| Description: a|
When used in a grammar syntax line, indicates that the domain for validating the availability of the specified direct object should be set to the parent object specified in the input line.

// ****//   parse   //****

3+<.^| [.big]#parse#$
| {blank}

s| Description: a|
Read-only engine variable that contains either the offending portion of an invalid input line or any section of the input line enclosed in quotes.

// ****//   pause   //****

3+<.^| [.big]#pause#
| {blank}

s| Description: a|
Pauses until a key is pressed.
The value of the key is stored in `word[0]`.

// ****//   picture   //****

3+<.^| [.big]#picture#
.2+| {blank}

s| Description: a|
Load and display an image resource in the currently defined window (if graphics are available).

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
.....................................
picture "<resourcefile>", "<picture>"
picture "<picturefile>"
.....................................

where, while `<resourcefile>` is optional, it is very highly recommended (otherwise, `<picturefile>` will likely not be named in a cross-platform portable format).

// ****//   playback   //****

3+<.^| [.big]#playback#
.3+| {blank}

s| Description: a|
Plays back recorded commands from a file in place of keyboard input (by prompting the user).

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = playback
............................
{blank}

s| Return{nbsp}value: a| True if successful, false if not.

// ****//   print   //****

3+<.^| [.big]#print#
.2+| {blank}

s| Description: a| Print text output.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
print <output>
............................

// @EDITED TYPO: (documented & waiting approval: Issue #28)
//  "both TEST strings" --> "both TEXT strings"
where `<output>` can consist of both text strings enclosed in quotation marks (`"..."`), and values representing dictionary addresses, such as object names.
Separate components of `<output>` are separated by a semicolon (`;`).
Each component may also be preceded by a modifier such as `capital`, `hex`, or `number`.

// ****//   printchar   //****

3+<.^| [.big]#printchar#
.2+| {blank}

s| Description: a|
Prints a character or series of characters at the current cursor position.
No newline is printed.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
..............................
printchar <val1>[, <val2>,...]
..............................
{blank}

// ****//   quit   //****

3+<.^| [.big]#quit#
.2+| {blank}

s| Description: a| Terminates the game loop.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
quit
............................
{blank}

// ****//   random   //****

3+<.^| [.big]#random#
.3+| {blank}

s| Description: a| Engine function which generates a random number.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = random(<val>)
............................
{blank}

s| Return{nbsp}value: a|
Where `<val>` is a positive integer number, will return a random number between 1 and `<val>`, inclusively.

// ****//   readfile   //****

3+<.^| [.big]#readfile#
.2+| {blank}

s| Description: a|
A structure that allows values to be read from a file written using `writefile`.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
readfile <filename>
{
    ...
}
............................

The file is opened and positioned to the start at the beginning of the `readfile` block, and closed at the end.

// ****//   readval   //****

3+<.^| [.big]#readval#
.3+| {blank}

s| Description: a| Reads a value in a `readfile` block.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = readval
............................
{blank}

s| Value: a|
The value read, or 0 in the case of an error.
Use the `FILE_CHECK` constant defined in *hugolib.h* to determine if a `readfile` block has been executed successfully.


// ****//   recordoff   //****

3+<.^| [.big]#recordoff#
.3+| {blank}

s| Description: a| Ends recording commands to a file.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = recordoff
............................
{blank}

s| Value: a| True if successful, false if not.

// ****//   recordon   //****

3+<.^| [.big]#recordon#
.3+| {blank}

s| Description: a|
Begins recording commands to a file (by prompting the user).

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = recordon
............................
{blank}

s| Value: a| True if successful, false if not.

// ****//   remove   //****

3+<.^| [.big]#remove#
.2+| {blank}

s| Description: a| Removes an object from the object tree.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
remove <object>
............................

(The same as: `move <object> to 0`)

// ****//   restart   //****

3+<.^| [.big]#restart#
.4+| {blank}

s| Description: a|
Reloads the initial game data from the *.HEX* file and calls the `Init` routine.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = restart
............................
{blank}

s| Note: a|
The `restart` statement does not technically restart the engine; the game loop continues uninterrupted after `Init` is called, only with the game data restored to its initial state.

s| Value: a| True if successful, false if not.

// ****//   restore   //****

3+<.^| [.big]#restore#
.3+| {blank}

s| Description: a|
Restores a saved game's state data from a previously saved file (by prompting the user).

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = restore
............................
{blank}

s| Value: a| True if successful, false if not.

// ****//   return   //****

3+<.^| [.big]#return#
.3+| {blank}

s| Description: a| Returns from a called routine.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
return [<expression>]
............................

{blank}

s| Return{nbsp}value: a|
Returns `<expression>` if provided, otherwise returns false.

// ****//   run   //****

3+<.^| [.big]#run#
.3+| {blank}

s| Description: a| Runs an object property routine if one exists.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
run <object>.<property>
............................
{blank}

s| Return{nbsp}value: a|
None; any value returned by the property routine is discarded.

// ****//   runevents   //****

3+<.^| [.big]#runevents#
.2+| {blank}

s| Description: a|
Calls all events which are either global or currently within the event scope of the player object.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
runevents
............................
{blank}

// ****//   save   //****

3+<.^| [.big]#save#
.3+| {blank}

s| Description: a| Saves the current game state to a file (by prompting the user).

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = save
............................
{blank}

s| Value: a| True if successful, false if not.

// ****//   scriptoff   //****

3+<.^| [.big]#scriptoff#
.3+| {blank}

s| Description: a| Turns transcription off.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = scriptoff
............................

{blank}

s| Value: a| True if successful, false if not.

// ****//   scripton   //****

3+<.^| [.big]#scripton#
.3+| {blank}

s| Description: a|
Turns transcription (i.e., recording output to a file or to a printer) on.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = scripton
............................
{blank}

s| Value: a| True if successful, false if not.

// ****//   select   //****

3+<.^| [.big]#select#
.2+| {blank}

s| Description: a|
Specifies the value for comparison in a `select`-`case` conditional structure.

s| Syntax: a|// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
...............................
select <val>
    case <case1>[, <case2>,...]
        ...
    case <case3>[, <case4>,...]
        ...
...............................

where `<val>` is value such as a variable, routine return value, object property, array element, etc., and each `<case>` is a single value for comparison (not an expression).

// ****//   serial   //****

3+<.^| [.big]#serial#$
| {blank}

s| Description: a|
Read-only engine variable that contains the serial number as written by the compiler.

// ****//   sibling   //****

3+<.^| [.big]#sibling#
.2+| {blank}

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = sibling(<object>)
............................

{blank}

s| Return{nbsp}value: a|
The number of the object next to `<object>` on the same branch of the object tree.

// ****//   sound   //****

3+<.^| [.big]#sound#
.2+| {blank}

s| Description: a|
Load and play an audio sample resource (if waveform audio output is available).

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
......................................
sound [repeat] "file", "sample"[, vol]
sound 0
......................................

where `<file>` is a compiled Hugo resourcefile, and `<sample>` is a waveform sample in RIFF/WAV format.
The optional `<vol>` argument, if given, ranges from 0 to 100 and gives a percentage of volume for playback.
If the `repeat` token is used, the sample continues to loop until either a new sample is played, or the current sample is stopped (using `sound 0`).

// ****//   string   //****

3+<.^| [.big]#string#
.2+| {blank}

s| Description: a|
When used in a grammar syntax line, indicates that a string array enclosed in quotation marks is valid.

When used as a function, stores a dictionary entry in a string array.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
.....................................
x = string(<array>, <dict>, <maxlen>)
x = string(<array>, parse$, <maxlen>)
.....................................

where `<array>` is an array address, stores the either the dictionary entry given by `<dict>` or the contents of `parse$` as a series of characters, to a maximum of `<maxlen>` characters.
Returns the length of the string stored in `<array>`.

// ****//   system   //****

3+<.^| [.big]#system#
.2+| {blank}

s| Description: a| Built-in function to call low-level system functions.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
system(<function>)
............................

[cols=">m,<m,<a",options=autowidth,grid=none,stripes=even]
!=====================================
! FUNC. ! LABEL ! DESCRIPTION

! 11 ! READ_KEY           ! Read keypress
! 21 ! NORMALIZE_RANDOM   ! Make random values predictable
! 22 ! INIT_RANDOM        ! Restore `random` random values
! 31 ! PAUSE_SECOND       ! Pause for one second
! 32 ! PAUSE_100TH_SECOND ! Pause for 1/100th of a second
! 41 ! GAME_RESET         ! Returns true after restore or undo
! 51 ! SYSTEM_TIME        ! Stores system time in `parse$`
! 61 ! MINIMAL_INTERFACE  ! Returns true for minimal ports
!=====================================
{blank}

NOTE: Labels are defined as a constants in *system.h*.

If `<function>` is unavailable, the engine may set `system_status` to -1 (`STAT_UNAVAILABLE`).

// ****//   text   //****

3+<.^| [.big]#text#
.2+| {blank}

m| text{nbsp}to{nbsp}<val> a|
Sends text to the array table, beginning at address `<val>`.

m| text to 0 | Restores normal printing.

// ****//   to   //****

3+<.^| [.big]#to#
.2+| {blank}

s| Description: a|
In a `print` statement, prints blank spaces in the current background color to the specified position.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
print to <val>
............................

where `<val>` is a positive integer less than or equal to the maximum column position

// ****//   true   //****

3+<.^| [.big]#true#
| {blank}

s| Description: a| Predefined constant: 1.

// ****//   undo   //****

3+<.^| [.big]#undo#
.3+| {blank}

s| Description: a|
Attempts to recover the state of the game data before the last player command.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = undo
............................
{blank}

s| Value: a| True if successful, false if not.

// ****//   verb   //****

3+<.^| [.big]#verb#
.2+| {blank}

s| Description: a|
Begins definition of a regular verb.
Upon returning true from the verb routine, `Main` is called.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
verb "<word1>"[, "<word2>",...]
............................
{blank}

// ****//   while   //****

3+<.^| [.big]#while#
.2+| {blank}

s| Description: a| Component of `while` or `do`-`while` loop construct.

s| Syntax: a|// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
while <expr>
{
    ...
}
............................

or

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
do
{
    ...
}
while <expr>
............................

where the loop will run as long as `<expr>` holds true.

// ****//   window   //****

3+<.^| [.big]#window#
.2+| {blank}

s| Description: a| Switches output to the status window.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
window a[, b, c, d]
    {...}
............................

or

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
window
    {...}
............................

or

// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
writefile <filename>
{
    ...
}
............................

The file is opened and positioned to the start at the beginning of the `writefile` block, and closed at the end.

// ****//   writeval   //****

3+<.^| [.big]#writeval#
.2+| {blank}

s| Description: a| Writes one or more values in a `writefile` block.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
...............................
writefile value1[, value2, ...]
...............................
{blank}

// ****//   xobject   //****

3+<.^| [.big]#xobject#
| {blank}

s| Description: a|
Global variable holding the object number of the indirect object, if any, specified in the input line.

When used in a grammar syntax line, indicates that a single available object is valid.

// ****//   xverb   //****

3+<.^| [.big]#xverb#
.2+| {blank}

s| Description: a|
Begins definition of non-action verb.
Upon returning from the verb routine, `Main` is not called.

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
.................................
xverb "<word1>"[, "<word2>", ...]
.................................
{blank}

// ****//   younger   //****

3+<.^| [.big]#younger#
| {blank}

2+a| Same as `sibling`.

// ****//   youngest   //****

3+<.^| [.big]#youngest#
.2+| {blank}

s| Syntax: a|
// @HUGO SYNTAX DEFINITION
[literal, role="hugosyntax"]
............................
x = youngest(<parent>)
............................
{blank}

s| Return{nbsp}value: a|
The number of the object most recently added to parent `<parent>`.
|===============================================================================

// EOF //
